name: Dummy deploy

on:
  workflow_dispatch:
    inputs:
      ref:
        description: Which release version to deploy
        required: true
      environment:
        description: Which environment to deploy to (test or prod)
        required: true

env:
  GITHUB_TOKEN: ${{ github.token }}
  ENVIRONMENT: ${{ github.event.inputs.environment || 'test'}}
  RELEASE: ${{ github.event.inputs.ref || format('v{0}', github.event.workflow_run.run_number)}}

jobs:
  deploy:
    runs-on: ubuntu-latest
    concurrency: ${{ github.event.inputs.environment || 'test' }}
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success'}}
      steps:
        - name: Validate environment
          if: env.ENVIRONMENT != 'test' && env.ENVIRONMENT != 'prod'
          run: echo "::error::Invalid environment $ENVIRONMENT" && exit 1

        - name: Validate release
          uses: octokit/request-action@v2.x
          with:
            route: GET /repos/${{ github.repository }}/releases/tags/${{ env.RELEASE }}
        
        - name: Create deployment
          id: create_deployment
          uses: avakar/create-deployment@8711a60d47672e4d77a3d1298802410a9edc877e
          with:
            environment: ${{ env.ENVIRONMENT }}
            production_environment: ${{ env.ENVIRONMENT == 'prod' }}
            description: Deployment of release ${{ env.RELEASE }} to ${{ env.ENVIRONMENT }}
            ref: ${{ env.RELEASE }}
            payload: '{ "run_id": "${{ github.run_id }}" }'
            auto_merge: false

        - name: Set deployment in progress
          uses: avakar/set-deployment-status@578b982d2ad5f56e50864f9e21ec354a073cd6f5
          with:
            state: in_progress
            deployment_id: ${{ steps.create_deployment.outputs.deployment_id }}
        
        - name: Simulate deployment work
          run: sleep 10s
          shell: bash

        - name: Update deployment status
          uses: avakar/set-deployment-status@578b982d2ad5f56e50864f9e21ec354a073cd6f5
          if: always()
          with:
            deployment_id: ${{ steps.create_deployment.outputs.deployment_id }}
            state: ${{ job.status == 'success' && 'success' || 'failure' }}